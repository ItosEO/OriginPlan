name: Android CI

on:
  push:
    branches:
      - master

jobs:
  build:

    runs-on: ubuntu-latest

    env:
      RELEASE_KEYSTORE_PASSWORD: ${{ secrets.RELEASE_KEYSTORE_PASSWORD }}
      RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Install Android SDK
        run: |
          sudo mkdir -p /usr/local/lib/android/sdk
          sudo chown $USER:$USER /usr/local/lib/android/sdk
          curl -Lo cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-8512546_latest.zip
          unzip cmdline-tools.zip -d cmdline-tools
          mkdir -p /usr/local/lib/android/sdk/cmdline-tools/latest
          cp -r cmdline-tools/cmdline-tools/* /usr/local/lib/android/sdk/cmdline-tools/latest/
          yes | /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager --sdk_root=/usr/local/lib/android/sdk --licenses
          /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager --sdk_root=/usr/local/lib/android/sdk "platforms;android-31" "ndk;21.4.7075529"

      - name: Set up environment variables
        run: |
          echo "ANDROID_HOME=/usr/local/lib/android/sdk" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=/usr/local/lib/android/sdk" >> $GITHUB_ENV
          echo "PATH=$PATH:/usr/local/lib/android/sdk/cmdline-tools/latest/bin:/usr/local/lib/android/sdk/platform-tools" >> $GITHUB_ENV

      - name: Build with Gradle
        run: |
          echo 'org.gradle.parallel=true' >> gradle.properties
          echo 'org.gradle.vfs.watch=true' >> gradle.properties
          sed -i 's/org.gradle.configuration-cache=true//g' gradle.properties
          echo 'buildCache { local { removeUnusedEntriesAfterDays = 1 } }' >> settings.gradle.kts
          echo "${{ secrets.SIGN_KEYSTORE_BASE64 }}" | base64 -d > keystore.jks
          chmod +x gradlew
          ./gradlew assembleRelease
          ccache -s

      - name: Find and set APK path
        id: find_apk
        run: |
          APK_FILE=$(find app/build/outputs/apk/release -name 'XPlan*.apk' | head -n 1)
          echo "APK_PATH=$APK_FILE" >> $GITHUB_ENV
          echo "::set-output name=apk_path::$APK_FILE"
          ls -lh "$APK_FILE"

      - name: Sign APK with Keystore
        run: |
          echo "${{ secrets.RELEASE_KEYSTORE_FILE }}" | base64 -d > keystore.jks
          $ANDROID_HOME/build-tools/31.0.0/apksigner sign --ks keystore.jks --ks-key-alias ${{ secrets.RELEASE_KEY_ALIAS }} --ks-pass env:RELEASE_KEYSTORE_PASSWORD --key-pass env:RELEASE_KEY_PASSWORD --in "${{ steps.find_apk.outputs.apk_path }}"

      - name: Get versionName from Android app
        id: get_version
        run: |
          VERSION_NAME=$(awk -F'"' '/versionName/ {print $2}' app/build.gradle.kts | xargs)
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV
          echo "Version Name: $VERSION_NAME"

      - name: Show Artifacts SHA256
        run: |
          echo "### Build Success :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "|ABI|SHA256|" >> $GITHUB_STEP_SUMMARY
          echo "|:--------:|:----------|" >> $GITHUB_STEP_SUMMARY
          echo "|arm32|$(sha256sum ${{ steps.find_apk.outputs.apk_path }} | cut -d ' ' -f 1)" >> $GITHUB_STEP_SUMMARY

      - name: Upload APK artifact
        uses: actions/upload-artifact@v3
        with:
          name: XPlan_${{ steps.get_version.outputs.VERSION_NAME }}.apk
          path: ${{ steps.find_apk.outputs.apk_path }}
